@using MoodSyncApp.Services
@using MoodSyncApp.Models
@inject IFaceDetectionService FaceDetectionService
@inject IJSRuntime JSRuntime

<div class="face-detection-container">
    <div class="card">
        <div class="card-header text-center">
            <h5>ü§ñ AI Recognition & Mood Detection</h5>
            <p class="text-muted mb-0">AI-powered user identification and mood analysis</p>
        </div>
        <div class="card-body">
            @if (!cameraInitialized)
            {
                <div class="text-center">
                    <button class="btn btn-primary" @onclick="InitializeCamera">
                        <span>üì∑</span> Start Camera
                    </button>
                    <p class="text-muted mt-2">Click to access your camera for mood detection</p>
                </div>
            }
            else if (isProcessing)
            {
                <div class="text-center">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Identifying...</span>
                    </div>
                    <p>ü§ñ Identifying user and analyzing mood...</p>
                    <small class="text-muted">This may take a moment</small>
                </div>
            }
            else
            {
                <div class="camera-section">
                    <div class="video-container text-center mb-3">
                        <video @ref="videoElement" id="cameraVideo" width="320" height="240" autoplay muted style="border-radius: 10px; border: 2px solid #007bff;"></video>
                        <canvas @ref="canvasElement" id="captureCanvas" width="320" height="240" style="display: none;"></canvas>
                    </div>
                    
                    <div class="text-center mb-3">
                        <button class="btn btn-success me-2" @onclick="IdentifyAndAnalyze" disabled="@isProcessing">
                            <span>ÔøΩ</span> Identify & Analyze
                        </button>
                        <button class="btn btn-outline-secondary" @onclick="StopCamera">
                            <span>‚èπÔ∏è</span> Stop Camera
                        </button>
                    </div>

                    @if (lastIdentificationResult != null)
                    {
                        <div class="identification-result">
                            @if (lastIdentificationResult.UserRecognized && lastIdentificationResult.IdentifiedUser != null)
                            {
                                <div class="alert alert-success">
                                    <div class="row">
                                        <div class="col-12">
                                            <!-- User Identification Header -->
                                            <div class="d-flex align-items-center mb-3">
                                                <div class="me-3">
                                                    <span style="font-size: 3rem;">@lastIdentificationResult.IdentifiedUser.Avatar</span>
                                                </div>
                                                <div class="flex-grow-1">
                                                    <h5 class="mb-1">
                                                        <strong>@lastIdentificationResult.IdentifiedUser.Name</strong>
                                                        <span class="badge bg-success ms-2">@((int)(lastIdentificationResult.Confidence * 100))% match</span>
                                                    </h5>
                                                    <div class="text-muted small">
                                                        <span class="me-3">üìß @lastIdentificationResult.IdentifiedUser.Email</span>
                                                        <span class="me-3">üë• @lastIdentificationResult.IdentifiedUser.Relationship</span>
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Context Information -->
                                            <div class="bg-light p-3 rounded mb-3">
                                                <h6 class="mb-2">üìã Context</h6>
                                                <div class="row small">
                                                    <div class="col-md-6">
                                                        <strong>Last Seen:</strong> @lastIdentificationResult.IdentifiedUser.LastSeenContext<br>
                                                        <strong>Status:</strong> @lastIdentificationResult.IdentifiedUser.CurrentStatus
                                                    </div>
                                                    <div class="col-md-6">
                                                        <strong>Recent Activities:</strong>
                                                        <ul class="mb-0 ps-3">
                                                            @foreach (var activity in lastIdentificationResult.IdentifiedUser.RecentActivities.Take(2))
                                                            {
                                                                <li>@activity</li>
                                                            }
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Mood Suggestion -->
                                            <div class="bg-primary bg-opacity-10 p-3 rounded mb-3">
                                                <div class="d-flex align-items-center">
                                                    <div class="me-3">
                                                        <span style="font-size: 2.5rem;">@lastIdentificationResult.SuggestedMood.GetEmoji()</span>
                                                    </div>
                                                    <div class="flex-grow-1">
                                                        <h6 class="mb-1">
                                                            <strong>Suggested Mood: @lastIdentificationResult.SuggestedMood.GetDescription()</strong>
                                                        </h6>
                                                        <small class="text-muted">@lastIdentificationResult.SuggestedMoodReason</small>
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Welcome Message -->
                                            <div class="text-center">
                                                <p class="mb-3"><em>@lastIdentificationResult.Message</em></p>
                                                <button class="btn btn-primary" @onclick="() => AcceptSuggestion(lastIdentificationResult.SuggestedMood)">
                                                    <span>‚úÖ</span> Use Suggested Mood
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-warning">
                                    <div class="d-flex align-items-center">
                                        <span class="me-2" style="font-size: 1.5rem;">‚ùì</span>
                                        <div>
                                            <h6 class="mb-1">Face Detected - Unknown User</h6>
                                            <small>@lastIdentificationResult.Message</small>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<style>
    .face-detection-container {
        max-width: 500px;
        margin: 0 auto;
    }

    .video-container {
        position: relative;
        display: inline-block;
    }

    .video-container::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        border: 2px dashed #007bff;
        border-radius: 10px;
        pointer-events: none;
        opacity: 0.5;
    }

    .identification-result {
        margin-top: 1rem;
    }

    .alert {
        border-radius: 10px;
    }

    .bg-opacity-10 {
        background-color: rgba(13, 110, 253, 0.1) !important;
    }
</style>

@code {
    private ElementReference videoElement;
    private ElementReference canvasElement;
    private bool cameraInitialized = false;
    private bool isProcessing = false;
    private UserIdentificationResult? lastIdentificationResult;

    [Parameter] public EventCallback<MoodType> OnMoodSuggested { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeFaceDetection");
        }
    }

    private async Task InitializeCamera()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("startCamera", videoElement);
            cameraInitialized = true;
            await FaceDetectionService.InitializeCameraAsync();
            StateHasChanged();
        }
        catch (Exception)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Camera access failed. Please allow camera permissions.");
        }
    }

    private async Task IdentifyAndAnalyze()
    {
        if (!cameraInitialized) return;

        isProcessing = true;
        StateHasChanged();

        try
        {
            var imageData = await JSRuntime.InvokeAsync<string>("captureFrame", videoElement, canvasElement);
            
            // Simulate processing delay for better UX
            await Task.Delay(2000);
            
            // Use the new identification service
            lastIdentificationResult = await FaceDetectionService.IdentifyUserAsync(imageData);
        }
        catch (Exception)
        {
            lastIdentificationResult = new UserIdentificationResult
            {
                UserRecognized = false,
                Message = "Analysis failed. Please try again.",
                SuggestedMood = MoodType.Neutral
            };
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task AcceptSuggestion(MoodType suggestedMood)
    {
        await OnMoodSuggested.InvokeAsync(suggestedMood);
    }

    private async Task StopCamera()
    {
        await JSRuntime.InvokeVoidAsync("stopCamera");
        cameraInitialized = false;
        lastIdentificationResult = null;
        StateHasChanged();
    }
}
