@page "/contacts"
@using MoodSyncApp.Services
@using MoodSyncApp.Models
@inject IUserIdentificationService UserIdentificationService
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="page-header">
                <h1>üë• Contact Management</h1>
                <p>Manage your AI recognition contacts for personalized mood suggestions</p>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-4 col-md-6 mb-4">
            <div class="contact-form">
                <h4 class="mb-3">‚ûï Add New Contact</h4>
                <div class="form-group mb-3">
                    <label for="contactName" class="form-label">Name</label>
                    <input type="text" class="form-control" id="contactName" @bind="newContact.Name" placeholder="Enter full name" />
                </div>
                <div class="form-group mb-3">
                    <label for="contactEmail" class="form-label">Email</label>
                    <input type="email" class="form-control" id="contactEmail" @bind="newContact.Email" placeholder="Enter email address" />
                </div>
                <div class="form-group mb-3">
                    <label for="contactAvatar" class="form-label">Avatar Emoji</label>
                    <input type="text" class="form-control" id="contactAvatar" @bind="newContact.Avatar" placeholder="üë§" maxlength="2" />
                </div>
                <div class="form-group mb-3">
                    <label for="contactRelationship" class="form-label">Relationship</label>
                    <select class="form-control" id="contactRelationship" @bind="newContact.Relationship">
                        <option value="">Select relationship...</option>
                        <option value="Colleague">Colleague</option>
                        <option value="Manager">Manager</option>
                        <option value="Team Lead">Team Lead</option>
                        <option value="Developer">Developer</option>
                        <option value="Designer">Designer</option>
                        <option value="Friend">Friend</option>
                        <option value="Family">Family</option>
                        <option value="Client">Client</option>
                    </select>
                </div>
                <div class="form-group mb-3">
                    <label for="contactStatus" class="form-label">Current Status</label>
                    <input type="text" class="form-control" id="contactStatus" @bind="newContact.CurrentStatus" placeholder="What are they working on?" />
                </div>
                <div class="form-group mb-3">
                    <label for="contactContext" class="form-label">Last Seen Context</label>
                    <input type="text" class="form-control" id="contactContext" @bind="newContact.LastSeenContext" placeholder="When/where did you last see them?" />
                </div>
                <div class="form-group mb-4">
                    <label for="contactMood" class="form-label">Typical Mood</label>
                    <select class="form-control" id="contactMood" @bind="selectedMoodType">
                        <option value="@MoodType.Happy">üòä Happy</option>
                        <option value="@MoodType.Neutral">ÔøΩ Neutral</option>
                        <option value="@MoodType.Sad">üòî Sad</option>
                        <option value="@MoodType.Angry">üò† Angry</option>
                        <option value="@MoodType.Tired">üò¥ Tired</option>
                    </select>
                </div>
                <button type="button" class="btn btn-primary btn-block w-100" @onclick="AddContact" disabled="@isAddingContact">
                    @if (isAddingContact)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        <span>Adding...</span>
                    }
                    else
                    {
                        <span>‚úÖ Add Contact</span>
                    }
                </button>

                @if (!string.IsNullOrEmpty(addMessage))
                {
                    <div class="alert @(addMessageType == "success" ? "alert-success" : "alert-danger") mt-3">
                        @addMessage
                    </div>
                }
            </div>
        </div>

        <div class="col-lg-8 col-md-6">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h4>üìã Current Contacts (@contacts.Count)</h4>
                <button class="btn btn-outline-primary" @onclick="LoadContacts">
                    <span>üîÑ</span> Refresh
                </button>
            </div>

            @if (isLoadingContacts)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p>Loading contacts...</p>
                </div>
            }
            else if (contacts.Count == 0)
            {
                <div class="alert alert-info text-center">
                    <h5>üë• No contacts yet</h5>
                    <p>Add your first contact to enable personalized AI mood suggestions!</p>
                </div>
            }
            else
            {
                <div class="row">
                    @foreach (var contact in contacts)
                    {
                        <div class="col-xl-6 col-lg-12 mb-3">
                            <div class="contact-item">
                                <div class="d-flex align-items-center">
                                    <div class="contact-avatar">
                                        @contact.Avatar
                                    </div>
                                    <div class="contact-info flex-grow-1">
                                        <h6>@contact.Name</h6>
                                        <small class="text-muted">
                                            üìß @contact.Email<br>
                                            üë• @contact.Relationship<br>
                                            üìÖ @contact.LastSeenContext<br>
                                            üíº @contact.CurrentStatus<br>
                                            üòä @contact.TypicalMood.GetDescription()
                                        </small>
                                    </div>
                                    <div class="contact-actions">
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteContact(contact.Id)">
                                            üóëÔ∏è
                                        </button>
                                    </div>
                                </div>
                                
                                @if (contact.RecentActivities.Any())
                                {
                                    <div class="mt-3">
                                        <strong>Recent Activities:</strong>
                                        <ul class="small mb-0 ps-3">
                                            @foreach (var activity in contact.RecentActivities.Take(2))
                                            {
                                                <li>@activity</li>
                                            }
                                        </ul>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    <div class="row mt-5">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>üí° How Contact Management Works</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>üéØ Purpose</h6>
                            <p>Contacts help the AI provide personalized mood suggestions based on:</p>
                            <ul>
                                <li>Professional relationships</li>
                                <li>Recent activities and context</li>
                                <li>Typical mood patterns</li>
                                <li>Current work status</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6>üîí Privacy</h6>
                            <p>All contact data is stored locally and used only for:</p>
                            <ul>
                                <li>Demo purposes in this application</li>
                                <li>Improving mood suggestion accuracy</li>
                                <li>Personalizing the user experience</li>
                                <li>Workshop demonstrations</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<MockContact> contacts = new();
    private MockContact newContact = new();
    private MoodType selectedMoodType = MoodType.Happy;
    private bool isLoadingContacts = false;
    private bool isAddingContact = false;
    private string addMessage = "";
    private string addMessageType = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadContacts();
    }

    private async Task LoadContacts()
    {
        isLoadingContacts = true;
        StateHasChanged();
        
        try
        {
            await Task.Delay(500); // Simulate loading
            contacts = await UserIdentificationService.GetMockContactsAsync();
        }
        finally
        {
            isLoadingContacts = false;
            StateHasChanged();
        }
    }

    private async Task AddContact()
    {
        if (string.IsNullOrWhiteSpace(newContact.Name) || string.IsNullOrWhiteSpace(newContact.Email))
        {
            addMessage = "Please fill in at least Name and Email fields.";
            addMessageType = "error";
            return;
        }

        isAddingContact = true;
        addMessage = "";
        StateHasChanged();

        try
        {
            await Task.Delay(1000); // Simulate API call

            // Create the contact with proper values
            var contactToAdd = new MockContact
            {
                Id = contacts.Count + 100, // Simple ID generation
                Name = newContact.Name,
                Email = newContact.Email,
                Avatar = string.IsNullOrEmpty(newContact.Avatar) ? "üë§" : newContact.Avatar,
                Relationship = string.IsNullOrEmpty(newContact.Relationship) ? "Contact" : newContact.Relationship,
                CurrentStatus = string.IsNullOrEmpty(newContact.CurrentStatus) ? "Active" : newContact.CurrentStatus,
                LastSeenContext = string.IsNullOrEmpty(newContact.LastSeenContext) ? "Recently" : newContact.LastSeenContext,
                LastSeen = DateTime.Now,
                TypicalMood = selectedMoodType,
                RecentActivities = new List<string> { "Added to contact list", "Ready for AI recognition" }
            };

            // Add to the mock service's contact list
            contacts.Add(contactToAdd);

            // Reset form
            newContact = new MockContact();
            selectedMoodType = MoodType.Happy;
            addMessage = $"‚úÖ Successfully added {contactToAdd.Name} to your contacts!";
            addMessageType = "success";

            // Clear success message after 3 seconds
            await Task.Delay(3000);
            addMessage = "";
        }
        catch (Exception ex)
        {
            addMessage = $"‚ùå Error adding contact: {ex.Message}";
            addMessageType = "error";
        }
        finally
        {
            isAddingContact = false;
            StateHasChanged();
        }
    }

    private async Task DeleteContact(int contactId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this contact?"))
        {
            contacts.RemoveAll(c => c.Id == contactId);
            StateHasChanged();
        }
    }
}
