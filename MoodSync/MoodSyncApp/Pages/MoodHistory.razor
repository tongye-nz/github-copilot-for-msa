@page "/mood-history"
@using MoodSyncApp.Models
@using MoodSyncApp.Services
@inject IMoodService MoodService

<PageTitle>Mood History - MoodSync</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3>ðŸ“Š Your Mood History</h3>
                    <p class="text-muted mb-0">Track your emotional journey over time</p>
                </div>
                <div class="card-body">
                    @if (moodHistory?.Any() == true)
                    {
                        <!-- Summary Stats -->
                        <div class="row mb-4">
                            <div class="col-md-3 text-center">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h4>@moodHistory.Count</h4>
                                        <small class="text-muted">Total Check-ins</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3 text-center">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h4>@mostFrequentMood.GetEmoji()</h4>
                                        <small class="text-muted">Most Common</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3 text-center">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h4>@daysActive</h4>
                                        <small class="text-muted">Active Days</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3 text-center">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h4>@happyPercentage%</h4>
                                        <small class="text-muted">Happy Days</small>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Mood Distribution -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h5>Mood Distribution</h5>
                                <div class="row">
                                    @foreach (var mood in Enum.GetValues<MoodType>())
                                    {
                                        var count = moodHistory.Count(m => m.MoodValue == mood);
                                        var percentage = moodHistory.Count > 0 ? (double)count / moodHistory.Count * 100 : 0;
                                        
                                        <div class="col-md-2 col-4 mb-2">
                                            <div class="text-center">
                                                <div style="font-size: 2rem;">@mood.GetEmoji()</div>
                                                <div class="progress" style="height: 20px;">
                                                    <div class="progress-bar" style="width: @percentage%"></div>
                                                </div>
                                                <small>@count (@Math.Round(percentage, 1)%)</small>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>

                        <!-- Timeline -->
                        <div class="row">
                            <div class="col-12">
                                <h5>Recent History</h5>
                                <div class="timeline">
                                    @foreach (var entry in moodHistory.OrderByDescending(m => m.CreatedAt))
                                    {
                                        <div class="timeline-item mb-3">
                                            <div class="card">
                                                <div class="card-body">
                                                    <div class="d-flex align-items-start">
                                                        <div class="me-3">
                                                            <span style="font-size: 2rem;">@entry.MoodValue.GetEmoji()</span>
                                                        </div>
                                                        <div class="flex-grow-1">
                                                            <h6 class="mb-1">@entry.MoodValue.GetDescription()</h6>
                                                            <small class="text-muted">@entry.CreatedAt.ToString("MMMM dd, yyyy 'at' h:mm tt")</small>
                                                            @if (!string.IsNullOrEmpty(entry.Note))
                                                            {
                                                                <div class="mt-2">
                                                                    <p class="mb-0">"@entry.Note"</p>
                                                                </div>
                                                            }
                                                        </div>
                                                        <div class="text-end">
                                                            <span class="badge bg-secondary">@GetDaysAgo(entry.CreatedAt)</span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <span style="font-size: 4rem;">ðŸ“ˆ</span>
                            <h4 class="mt-3">No mood history yet</h4>
                            <p class="text-muted">Start tracking your daily moods to see patterns and insights!</p>
                            <a href="/mood-checkin" class="btn btn-primary">Check In Now</a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<MoodEntry> moodHistory = new();
    private MoodType mostFrequentMood = MoodType.Neutral;
    private int daysActive = 0;
    private int happyPercentage = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadMoodHistory();
    }

    private async Task LoadMoodHistory()
    {
        moodHistory = await MoodService.GetMoodHistoryAsync("user1");
        
        if (moodHistory.Any())
        {
            // Calculate most frequent mood
            mostFrequentMood = moodHistory
                .GroupBy(m => m.MoodValue)
                .OrderByDescending(g => g.Count())
                .First()
                .Key;

            // Calculate days active
            daysActive = moodHistory.Select(m => m.CreatedAt.Date).Distinct().Count();

            // Calculate happy percentage
            happyPercentage = (int)Math.Round((double)moodHistory.Count(m => m.MoodValue == MoodType.Happy) / moodHistory.Count * 100);
        }
    }

    private string GetDaysAgo(DateTime date)
    {
        var days = (DateTime.Now.Date - date.Date).Days;
        return days switch
        {
            0 => "Today",
            1 => "Yesterday",
            _ => $"{days} days ago"
        };
    }
}
